#!/bin/bash
#
## AUTOGEN BY ./tools-conf , DO NOT MODYFY THIS FILE
#
APPLIST="
help
sys_config
gpio40_led
"
#
TOOLSLIST="
boardlist.conf
pkglist.conf
tools.conf
"
#!/bin/bash
#
## debian lite
#
BPILICENSE="GPLv2 or any later version"
BPICONF="sys.conf"
BPICONFVERSION="v1.0.2"
#END
##########################################################################
#!/bin/bash
APP=$0
echo APP=$APP
STARTTIME=`date +%s`
_excode=0

if [ "$(id -u)" != "0" ]; then
   echo "Script must be run as root !"
   exit 0
fi

#
## show finished
#
show_finished() {
  echo ""
  date
  echo ""
  echo "************************************************************"
  echo "Instalation finished."
  echo "************************************************************"
  ENDTIME=`date +%s`
  RUNTIMESEC=$((ENDTIME-STARTTIME))
  MIN=$(((RUNTIMESEC)/60))
  SEC=$(((RUNTIMESEC)%60))
  echo "RUNTIME" "$MIN:$SEC"
  echo "************************************************************"
}

gen_boardlist_conf() {
CONFFILE="$1"
#
CONF=`ls board`
#
  echo '#!/bin/bash' > $CONFFILE
  echo '#' >> $CONFFILE
  echo "## AUTOGEN BY $APP , DO NOT MODYFY THIS FILE" >> $CONFFILE
  echo '#' >> $CONFFILE
  echo 'BOARDLIST="' >> $CONFFILE
  for IN in $CONF
  do
    echo "$IN" >> $CONFFILE
  done
  echo '"' >> $CONFFILE
  cat $APP >> $CONFFILE
}

bpi_boardlist()
{
  echo BPIBOARD=$BPIBOARD
  for IN in $BOARDLIST
  do
     if [[ $BPIBOARD == "" ]] ; then
       echo "$IN"
     else
       echo "$IN" | grep $BPIBOARD
     fi
  done
#  show_finished
}

gen_pkglist_conf() {
CONFFILE="$1"
#
CONF=`ls pkg`
#
  echo '#!/bin/bash' > $CONFFILE
  echo '#' >> $CONFFILE
  echo "## AUTOGEN BY $APP , DO NOT MODYFY THIS FILE" >> $CONFFILE
  echo '#' >> $CONFFILE
  echo 'PKGLIST="' >> $CONFFILE
  for IN in $CONF
  do
    echo "$IN" >> $CONFFILE
  done
  echo '"' >> $CONFFILE
  cat $APP >> $CONFFILE
}

bpi_pkglist()
{
  echo "PKGLIST:"
  for IN in $PKGLIST
  do
       echo "$IN"
  done
#  show_finished
}

generate_pkg_conf() {
	PACKAGE=$1
	
	cat <<-EOT
	#!/bin/bash
	#
	## bpi-pkg-${PACKAGE}.conf
	#
	BPILICENSE="GPLv2 or any later version"
	BPICONF="bpi-pkg-${PACKAGE}.conf"
	BPICONFVERSION="v1.0.1"
	BPIPACKAGE="${PACKAGE}.tgz"
	#
	## PACKAGE to ROOTFS
	#
	BPIFILES="\$BPIPACKAGE"
	#END
	EOT
}

gen_package_conf() {
#
PKGS=`ls ../../bpi-pkg*.sh`
#
  for IN in $PKGS
  do
    eval `grep "^PACKAGE" $IN`
    CONFFILE="pkg/bpi-pkg-${PACKAGE}.conf"
    echo CONFFILE="$CONFFILE"
    generate_pkg_conf "$PACKAGE" > $CONFFILE
  done
}

gen_tools_conf() {
CONFFILE="$1"
#
CONF=`ls tools`
#
  echo '#!/bin/bash' > $CONFFILE
  echo '#' >> $CONFFILE
  echo "## AUTOGEN BY $APP , DO NOT MODYFY THIS FILE" >> $CONFFILE
  echo '#' >> $CONFFILE
  echo 'TOOLSLIST="' >> $CONFFILE
  for IN in $CONF
  do
    echo "$IN" >> $CONFFILE
  done
  echo '"' >> $CONFFILE
  cat $APP >> $CONFFILE
}

tools_list()
{
  echo "TOOLS:"
  for IN in $TOOLSLIST
  do
       echo "$IN"
  done
#  show_finished
}

sys_config()
{
  set -x
  lsb_release -a
  HOSTNAME=bpi-iot-ros-ai
  timedatectl set-timezone "Asia/Taipei"
  hostname $HOSTNAME
  echo $HOSTNAME > /etc/hostname
  #
  BPIOS=`lsb_release -si`
  case $BPIOS in
  openSUSE)
    sudo zypper update
    sudo zypper install curl pv
    ;;
  Arch)
    sudo pacman -Syu
    sudo pacman -S curl pv
    ;;
  Ubuntu|Debian|Kali)
    sudo apt-get update 
    sudo apt-get install curl pv
    ;;
  Fedora)
    sudo yum update 
    sudo yum install curl pv
    ;;
  CentOS)
    sudo yum update 
    sudo yum install curl pv
    ;;
  Gentoo)
    sudo emerge --sync
    sudo emerge -atv curl pv
    ;;
  *)
    echo "$BPIOS need to support ..."
    ;;
  esac
#  show_finished
}

##########################################################
# gpio40
##########################################################
#bin/bash
BOARD=$(bpi-hw)
#GPIO40_NO_IGPIO="13 14 3 17 58 25 27 7 4 5 6 8 12 11 100 21 54 59 57 22 23 24 60"
#IGPIOSORG="21 3 2 5 4 9"
#IGPIO + 101 = GPIO
#IGPIOS="122  104 103 106 105 110"
#BPI-W2
GPIO40="13 14 122 104 103 3 17 58 25 27 106 105 7 4 110 5 6 8 12 11 100 21 54 59 57 22 23 24 60"
GPIOLED="128 97 98" 
GPIOS="$GPIO40 $GPIOLED"


export_gpio() {
  for IN in $GPIOS ; do
    EXPORT=/sys/class/gpio/export
    VALUE=/sys/class/gpio/gpio$IN/value
    if [ ! -f $VALUE ] ; then
      echo $IN > $EXPORT
    fi
  done
}

out_gpio() {
  for IN in $GPIOS ; do
    DIR=/sys/class/gpio/gpio$IN/direction
    if [ -f $DIR ] ; then
      echo  out > $DIR
    fi
  done
}

hi_gpio() {
  for IN in $GPIOS ; do
    VALUE=/sys/class/gpio/gpio$IN/value
    if [ -f $VALUE ] ; then
      echo 1 > $VALUE
    fi
  done
}

on_off_led()                                                                    
{                                                                               
ONOFF=$1                                                                        
  for IN in $GPIOS ; do
    VALUE=/sys/class/gpio/gpio$IN/value
    if [ -f $VALUE ] ; then
      echo $ONOFF > $VALUE
    fi
  done
}                                                                               


get_gpio_config()
{
  echo BOARD=$BOARD
  case ${BOARD} in
  bpi-w2)
    #BPI-W2
    GPIO40="13 14 122 104 103 3 17 58 25 27 106 105 7 4 110 5 6 8 12 11 100 21 54 59 57 22 23 24 60"
    GPIOLED="128 97 98" 
    GPIOS="$GPIO40 $GPIOLED"
    ;;
  bpi-r2)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="82" #TODO
    ;;
  bpi-m3)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="16" #TODO
    ;;
  bpi-m64)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="16" #TODO
    ;;
  bpi-m2u)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="16" #TODO
    ;;
  bpi-m2z)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="13" #TODO
    ;;
  bpi-m2p-h5)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="13" #TODO
    ;;
  bpi-m2p)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="13" #TODO
    ;;
  bpi-m2)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="68" #TODO
    ;;
  bpi-m1p)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="112" #TODO
    ;;
  bpi-m1)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="112" #TODO
    ;;
  bpi-r1)
    echo "TODO: unsupport $BOARD !! only test pin 8"
    GPIOS="112" #TODO
    ;;
  *)
    echo "unsupport $BOARD !! EXIT!!"
    exit 1
    ;;
  esac
}

gpio40_led() {
  get_gpio_config
  export_gpio
  out_gpio
  hi_gpio
  #
  echo "BPI: Blink gpio40 led"
  while [ 1 ] ; do
    on_off_led 0                                                            
    sleep .5                                                                
    on_off_led 1                                                            
    sleep .5                                                                
  done
}

case $APP in
*bpi-*)
  shift #
  shift #
  echo BPI: "$@"
  ;;
*)
  echo BPI: "$@"
  ;;
esac

#step 0: main/getopt
BPICMDOPT="c:r:U:b:i:d:S:D:s:B:uGvh"

GETOPTEST=`getopt --version`
case $GETOPTEST in
getopt*) # GNU getopt
  BPI_TEMP=`getopt -l config: -l root: -l uboot: -l boot: -l imgfile: -l device: -l src: -l dst: -l size: -l update -l download -l BOOTSIZE: -l version -l help -- +${BPICMDOPT} "$@"`
  ;;
*) # POSIX getopt ?
  BPI_TEMP=`getopt ${BPICMDOPT} "$@"`
  ;;
esac

if test "$?" -ne 0; then
  usage
fi

eval set -- "$BPI_TEMP"

BPIDOPTS=""

while test "X$1" != "X--"; do
  case "$1" in
    -c|--config)
       shift
       ;;
    -r|--root)
       shift
       ;;
    -U|--uboot)
       shift
       ;;
    -b|--boot)
       shift
       ;;
    -i|--imgfile)
       shift
       ;;
    -d|--device)
       shift
       ;;
    -S|--src)
       shift
       ;;
    -D|--dst)
       shift
       ;;
    -s|--size)
       shift
       ;;
    -B|--BOOTSIZE)
       shift
       ;;
    -u|--update)
       echo "update"
       F_UPDATE=YES
       ;;
    -G|--download)
       echo "download"
       F_DOWNLOAD=YES
       ;;
    -v|--version)
       usage
       exit 0
       ;;
    -h|--help)
       usage
       ;;
  esac
  shift
done

shift #get rid of the '--'


NEWAPP=$1
##########################################################
# main
##########################################################
case $APP in
*boardlist)
  CONFFILE="tools/boardlist.conf"
  echo "$APP: gen_boardlist_conf $CONFFILE"
  gen_boardlist_conf $CONFFILE
  exit 0
  ;;
*bpi-pkg-conf)
  echo "$APP: bpi-pkg-conf"
  gen_package_conf
  exit 0
  ;;
*bpi-pkg-list)
  CONFFILE="tools/pkglist.conf"
  echo "$APP: bpi-pkg-list $CONFFILE"
  gen_pkglist_conf $CONFFILE
  exit 0
  ;;
*tools-conf)
  CONFFILE="tools/tools.conf"
  echo "$APP: gen_tools_conf $CONFFILE"
  gen_tools_conf $CONFFILE
  exit 0
  ;;
*)
  echo "run: $NEWAPP"
  ;;
esac


case $NEWAPP in
*sys_config*)
  sys_config $*
  exit 0
  ;;
*gpio*)
  gpio40_led $*
  exit 0
  ;;
*)
  #help
  for IN in $APPLIST
  do
    echo "$APP -c $BPICONF $IN"
  done
  exit 0
  ;;
esac

